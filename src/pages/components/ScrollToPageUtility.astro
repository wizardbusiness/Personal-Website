---
import { Icon } from "astro-icon";
const { url, scrollDirection } = Astro.props;
import "../../styles/tailwind.css";
---

<a
  href={url}
  data-scroll-btn={scrollDirection}
  class=`cursor-default h-fit scroll-btn flex w-20 ${scrollDirection === "down" && "translate-y-1/2"} flex-col items-center text-gray-400 `
>
  <span
    data-scroll-halo
    class={scrollDirection === "up"
      ? "flex nav-scroll m-0 h-[10vh] items-center justify-center w-[40vw] -translate-y-1/4 text-lg"
      : "translate-y-4"}
  >
    {scrollDirection === "down" && <div class="text-center">Scroll</div>}
    <Icon
      pack="ph"
      name={`caret-${scrollDirection}`}
      height="60"
      width="60"
      data-scroll-icon
      class="animate-pulse cursor-pointer text-gray-100"
    />
  </span>
</a>
<script>
  const handleScrollNavOnMain = () => {};

  const listenForScrollEventCluster = () => {
    const scrollWidget: HTMLElement =
      document.querySelector("[data-scroll-btn]");
    // handleScrollNavOnMain();

    const taglineContainer = document.querySelector("[data-subheader]");
    const transitionGroup = document.querySelector("[data-transition-group]");
    let msSinceLastScrollEvent = 0;
    let initial = true;
    let deltaY = 0;
    const scrollListener = setInterval(() => {
      if (msSinceLastScrollEvent > 100) deltaY = 0;
      if (deltaY < 0 && !initial) {
        scrollWidget.classList.add("move-down");
        transitionGroup.classList.add("transition");
        taglineContainer.classList.add("animate-fall-from");
        taglineContainer.addEventListener("animationend", () => {
          scrollWidget.classList.remove("move-down");
          transitionGroup.classList.remove("transition");
          clearInterval(scrollListener);
          scrollWidget.click();
        });
      }
      msSinceLastScrollEvent += 100;
    }, 100);
    return (e) => {
      initial = false;
      msSinceLastScrollEvent = 0;
      deltaY = e.deltaY;
    };
  };

  const handleScrollUp = (icon: Element, scrollElement: Element) => {
    let msSinceLastScrollEvent = 0;
    let initial = true;
    let deltaY = 0;
    const scrollListener = setInterval(() => {
      if (msSinceLastScrollEvent > 100) deltaY = 0;
      if (deltaY > 0 && !initial) {
        clearInterval(scrollListener);
        icon.classList.remove("animate-scooch-up&pulse");
        icon.classList.add("animate-rise-from");
        icon.addEventListener("animationend", () => scrollElement.click());
      }
      msSinceLastScrollEvent += 100;
    }, 100);
    return (e) => {
      initial = false;
      msSinceLastScrollEvent = 0;
      deltaY = e.deltaY;
    };
  };

  const handleEnterScrollArea = () => {
    const scrollToPrevPageTargArea =
      document.querySelector("[data-scroll-halo]");
    const scrollToPrevPageIcon = document.querySelector("[data-scroll-icon]");
    scrollToPrevPageTargArea.addEventListener("mouseenter", () =>
      scrollToPrevPageIcon.classList.add("animate-scooch-up&pulse"),
    );
    scrollToPrevPageTargArea.addEventListener("mouseleave", () => {
      scrollToPrevPageIcon.classList.remove("animate-scooch-up&pulse");
      scrollToPrevPageIcon.classList.add("animate-pulse");
    });
    const scrollUpListener = handleScrollUp(
      scrollToPrevPageIcon,
      scrollToPrevPageTargArea,
    );
    scrollToPrevPageTargArea.addEventListener("wheel", (e) => {
      scrollUpListener(e);
    });
  };

  document.addEventListener("astro:page-load", () => {
    const url = location.href;
    if (url.includes("MainContent")) {
      handleEnterScrollArea();
    } else {
      const scroll = listenForScrollEventCluster();
      document.addEventListener("wheel", (e) => {
        scroll(e);
      });
    }
  });
</script>
