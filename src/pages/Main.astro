---
import CommonLayout from "../layouts/common-layout.astro";
import MainLayout from "../layouts/main-layout.astro";
import Nav from "../components/Nav.astro";
import NavController from "../components/NavController";
import TaglineContainer from "../components/TaglineContainer";
import TaglineMsg from "../components/TaglineMsg";
import Skyline from "../components/bgEffects/Skyline";
import About from "../components/About.astro";
import Portfolio from "../components/Portfolio.astro";
import Tech from "../components/Tech.astro";
import IllHandleTheRest from "../components/flavorText/IllHandleTheRest.astro";
import YouDreamIt from "../components/flavorText/YouDreamIt.astro";
import { Icon } from "astro-icon";
import _ from "lodash";
---

<CommonLayout>
  <MainLayout data-info-page slot="page">
    <Nav slot="nav">
      <NavController client:load navDirection="prev" pageUrl="/">
        <Icon
          pack="ph"
          name="caret-down"
          height="60"
          width="60"
          data-scroll-icon
          class="cursor-pointer self-center text-gray-500"
        />
      </NavController>
    </Nav>
    <div
      data-subheader-main
      class="relative z-10 flex h-32 w-2/3 animate-fall-to justify-center"
      slot="subheader"
    >
      <TaglineContainer repositTxt={true} animateBg client:load>
        <TaglineMsg
          msg="Dream it. Build it."
          blinkCursor={false}
          client:load
          transition:persist="taglineMsg"
        />
      </TaglineContainer>
      <Skyline client:load />
    </div>
    <About slot="about" />

    <Portfolio slot="portfolio" />
    <YouDreamIt slot="flav-text-a" />
    <Tech slot="tech" />
    <IllHandleTheRest slot="flav-text-b" />
  </MainLayout>
</CommonLayout>
<script>
  const handleShowHideHeader = () => {
    const mainContainer = document.querySelector("main");
    const infoContainer: HTMLElement = document.querySelector(
      "[data-info-container]",
    );
    const headerContainer: HTMLElement = document.querySelector("header");
    const subHeader: HTMLElement = document.querySelector(
      "[data-subheader-main]",
    );
    const navBar: HTMLElement = document.querySelector("nav");
    const navBottom: number = navBar.getBoundingClientRect().bottom;
    const elements = [headerContainer, subHeader, infoContainer];
    const windowHeight = window.innerHeight;

    const handleExpandContentContainer = (transformDistance: number) => {
      // without a set timeout, this resize looks jerky when user scrolls up.
      const wait = setTimeout(() => {
        // recalculates container height so that info fills whole height of available screenspace.
        mainContainer.style.height = `${windowHeight - transformDistance}px`;
        clearTimeout(wait);
      }, !transformDistance && 500); // only activates when header expands
    };

    const handleTranslateHeader = (
      elements: HTMLElement[],
      transformDistance: number,
    ) => {
      elements.forEach((element) => {
        element.style.transform = `translateY(${transformDistance}px)`;
      });

      handleExpandContentContainer(transformDistance);
    };

    const handleScrollSetup = (
      infoContainer: HTMLElement,
      elements: HTMLElement[],
      navBottom: number,
    ) => {
      let expand = true;

      return () => {
        const handleScrollEvent = (e: WheelEvent) => {
          const handleStopPropagation = (e: WheelEvent) => e.stopPropagation();
          handleStopPropagation(e);
          if (e.deltaY < 0 && infoContainer.scrollTop <= 0) {
            if (!expand) {
              handleTranslateHeader(elements, 0);
              expand = true;
            }
          } else if (e.deltaY > 0) {
            if (expand) {
              handleTranslateHeader(elements, navBottom);
              expand = false;
            }
          }
        };
        infoContainer.addEventListener("wheel", handleScrollEvent);
      };
    };

    const handleSwipe = (
      infoContainer: HTMLElement,
      elements: HTMLElement[],
      navBottom: number,
    ) => {
      let touchStartPosit: number;
      let touchEndPosit: number;
      infoContainer.addEventListener("touchstart", (e: TouchEvent) => {
        touchStartPosit = e.touches[0].clientY;
      });

      infoContainer.addEventListener("touchmove", (e: TouchEvent) => {
        touchEndPosit = e.touches[0].clientY;
        touchStartPosit < touchEndPosit && infoContainer.scrollTop <= 0
          ? handleTranslateHeader(elements, 0) // show header
          : handleTranslateHeader(elements, navBottom); // hide header
      });
    };
    const handleScroll = handleScrollSetup(
      infoContainer,
      elements,
      -1 * navBottom,
    );
    handleScroll();
    handleSwipe(infoContainer, elements, -1 * navBottom);
  };

  const handleNavPrev = () => {
    const onLanding = location.href.includes("/Main") ? false : true;
    if (!onLanding) {
      localStorage.setItem("navPrev", JSON.stringify(true));
    }
  };

  handleShowHideHeader();
  handleNavPrev();
</script>
