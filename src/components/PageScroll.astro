---
import { Icon } from "astro-icon";
const { url, scrollDirection } = Astro.props;
import "../styles/tailwind.css";
---

<a
  href={url}
  data-scroll-btn={scrollDirection}
  class="scroll-btn flex h-fit w-20 cursor-default flex-col items-center text-gray-400"
>
  <span
    data-scroll-halo
    class={scrollDirection === "up"
      ? "flex nav-scroll m-0 h-[4vh] lg:h-[10vh] items-center justify-center w-[40vw] translate-y-1/2 lg:-translate-y-4 text-lg"
      : "translate-y-4"}
  >
    {scrollDirection === "down" && <div class="text-center">Scroll</div>}
    <Icon
      pack="ph"
      name={`caret-${scrollDirection}`}
      height="60"
      width="60"
      data-scroll-icon
      class="animate-pulse cursor-pointer text-gray-100"
    />
  </span>
</a>
<script>
  document.addEventListener("astro:page-load", () => {
    const main = document.querySelector("main");
    const url = location.href;
    if (url.includes("Main")) {
      const scrollTargetArea: HTMLElement =
        document.querySelector("[data-scroll-halo]");
      const scrollUp = handleScrollUp(scrollTargetArea);
      scrollTargetArea.addEventListener("wheel", (e) => {
        scrollUp(e);
      });
    } else {
      const scrollDown = handleScrollDown();
      main.addEventListener("wheel", (e) => {
        scrollDown(e);
      });
    }
  });

  const handleScrollDown = () => {
    const scrollWidget: HTMLElement =
      document.querySelector("[data-scroll-btn]");

    const taglineContainer = document.querySelector("[data-subheader]");
    const transitionGroup = document.querySelector("[data-transition-group]");
    let msSinceLastScrollEvent = 0;
    let initial = true;
    let deltaY = 0;
    const scrollListener = setInterval(() => {
      if (msSinceLastScrollEvent > 100) deltaY = 0;
      if (deltaY < 0 && !initial) {
        scrollWidget.classList.add("move-down");
        transitionGroup.classList.add("transition");
        taglineContainer.classList.add("animate-fall-from");
        taglineContainer.addEventListener("animationend", () => {
          scrollWidget.classList.remove("move-down");
          transitionGroup.classList.remove("transition");
          clearInterval(scrollListener);
          scrollWidget.click();
        });
      }
      msSinceLastScrollEvent += 100;
    }, 100);
    return (e) => {
      initial = false;
      msSinceLastScrollEvent = 0;
      deltaY = e.deltaY;
    };
  };

  const handleScrollUp = (scrollTargetArea) => {
    const scrollIcon = document.querySelector("[data-scroll-icon]");
    handleScrollAreaInteraction(scrollTargetArea, scrollIcon);
    let msSinceLastScrollEvent = 0;
    let initial = true;
    let deltaY = 0;
    const scrollListener = setInterval(() => {
      if (msSinceLastScrollEvent > 100) deltaY = 0;
      if (deltaY > 0 && !initial) {
        clearInterval(scrollListener);
        scrollIcon.classList.remove("animate-scooch-up&pulse");
        scrollIcon.classList.add("animate-rise-from");
        scrollIcon.addEventListener("animationend", () =>
          scrollTargetArea.click(),
        );
      }
      msSinceLastScrollEvent += 100;
    }, 100);
    return (e) => {
      initial = false;
      msSinceLastScrollEvent = 0;
      deltaY = e.deltaY;
    };
  };

  const handleScrollAreaInteraction = (
    scrollableArea: HTMLElement,
    scrollIcon: Element,
  ) => {
    scrollableArea.addEventListener("mouseenter", () => {
      scrollIcon.classList.remove("animate-pulse");
      scrollIcon.classList.add("animate-scooch-up&pulse");
    });
    scrollableArea.addEventListener("mouseleave", () => {
      scrollIcon.classList.remove("animate-scooch-up&pulse");
      scrollIcon.classList.add("animate-pulse");
    });
  };
</script>
